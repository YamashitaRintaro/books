# 正規形とは？
正規形はDBで保持するデータの冗長性を排除し、一貫性と効率性を保持するデータ形式です。
通常、第3正規形まで整理すれば十分です。

## 正規化のメリット
正規化は以下のような問題を解決します。
- 冗長性：1つの情報が複数のテーブルに存在して無駄なデータ領域と更新作業を発生させる。
- 非一貫性：冗長なデータ保持をしていると、更新作業のタイムラグによってデータの不整合が生じだり、そもそもデータを登録できないテーブルを作ってしまうこともある。

## 正規化のデメリット
テーブル数が増えるため、SQL文で結合を多用することになり、パフォーマンスが低下する

## 第1正規形（1NF）
各セルに一意の値（スカラ値）を保持し、データの一貫性を確保します。
各フィールド（セル）に複数の値を持たせない。例えば、一つのセルに名前リストを保持するのではなく、個別のレコードとして分割します。

### なぜ1つのセルに複数の値を入れてはダメなのか？
セルに複数の値を許せば、主キーが各列の値を一意に決定できないからです。
一方、スカラ値だけのテーブルであれば主キーが各列を一意に決定できます。
このことは、関数従属性と結びついています。

### 関数従属性とは、
関数従属性とは、ある属性（または属性の組）が他の属性の値を一意に決定する関係を指します。
言い換えれば、あるフィールドの値が他のフィールドの値にどのように影響を与えるか、という関係性です。
形式的には、属性 X と Y があるとき、X の値が Y の値を一意に決定する場合、"X → Y" と表されます。
ここで X は決定子（determinant）と呼ばれ、Y は従属属性です。

## 第2正規形（2NF）
第2正規形とは、部分関数従属を取り除き、完全関数従属のみのテーブルを作ることです。
部分関数従属とは、主キーの一部の列に対して従属がある列がある関係のことを指します。
完全関数従属性とは、主キーを構成するすべての列に従属性がある場合を指します。

### 第2正規形にする方法 
複合主キーを使う場合、それに関連するデータが全てのキーに依存するようにします。
もし一部のデータが複合キーの一部にしか依存しない場合は、それを別のテーブルに分割します。これにより、データの更新が容易になり、エラーが減少します。
部分関数従属は、テーブルの複合主キーを構成する一部の属性のみに依存する非キー属性が存在する場合に生じます。
これは、主キー全体ではなく、主キーの一部分によって値が決定される状態を指します。
部分関数従属が存在すると、データの冗長性が増加し、更新の際に異なる問題（例えば、更新の異常）が発生する可能性があります。

### 第3正規形（3NF）
データの依存関係をキーに限定し、非キー列が他の非キー列に依存しないようにします。
例えば「社員ID」から「部署コード」を導き、さらにその「部署コード」から「部署名」を導くような場合、これを分割して「部署名」は「部署コード」だけに依存する別のテーブルにします。

### 推移的関数従属
テーブル内に存在する段階的従属関係のこと。